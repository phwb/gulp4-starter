// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.


//** Number of columns in the grid.
@grid-columns:              4;
//** Padding between columns. Gets divided in half for the left and right.
@grid-gutter-width:         10px;

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) { // initial
    @item: ~".col-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
      box-sizing: border-box;
    }
  }
  .col(1); // kickstart it
}
// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
  margin-left:  ceil((@gutter / -2));
  margin-right: floor((@gutter / -2));
  &:extend(.clearfix all);
}
.calc-grid-column(@index, @type) when (@type = width) and (@index > 0) {
  .col-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
// Basic looping in LESS
.loop-grid-columns(@index, @type) when (@index >= 0) {
  .calc-grid-column(@index, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @type);
}
// Create grid for specific class
.make-grid() {
  .loop-grid-columns(@grid-columns, width);
}

// Rows
.row {
  .make-row();
}

// Columns
// Common styles for small and large grid columns
.make-grid-columns();

// Columns
.make-grid();
